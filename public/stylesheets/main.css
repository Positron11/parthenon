/* ================================================================ variables */

:root {
	--page-max-width: 1000px;
	--page-padding: min(3em, 8vw);
	--navbar-height: 5.5em;
	--standard-spacing: 3rem;

	--lighter-gray: #EEE;
	--light-gray: #BBBBBB;
	--dark-gray: #111111;
	--off-white: #F8F8F8;
	--red: #EF3D59;
	--green: #45CB85;

	--serif-font: "Crimson Pro", serif;
	--display-font: "DM Serif Display", serif;
}

/* =================================================================== global */

:is(html, body) {
	margin: 0;
	padding: 0;
	font-size: 22px;
	font-weight: 400;
	color: var(--dark-gray);
	font-family: var(--serif-font);
	scroll-padding-top: calc(var(--navbar-height) + 1em);
}
@media only screen and (max-width: 700px) {:is(html, body) { font-size: 19px; }}

/* ============================================================= headings */

:is(h1, h2, h3, h4) {
	margin: 0;
	font-weight: 400;
	font-family: var(--display-font);
}
:is(h1, h2, h3, h4, p) + :is(h1, h2, h3, h4) { margin-top: calc(var(--standard-spacing) / 2); }

h1 { 
	font-size: 4em; 
	line-height: 1.5em;
}
@media only screen and (max-width: 1000px) {h1 { font-size: 3em; }}
@media only screen and (max-width: 700px) {h1 { font-size: 2.5em; }}

h2 { 
	font-size: 2.5em; 
	line-height: 1.6em;
}
@media only screen and (max-width: 1000px) {h2 { font-size: 2em; }}
@media only screen and (max-width: 700px) {h2 { font-size: 1.8em; }}

h3 { 
	font-size: 1.5em; 
	line-height: 1.75em;
}

h4 { 
	font-size: 1em; 
	line-height: 2em;
}

/* ============================================================= text styling */

p { 
	margin: 0;
	text-align: justify;
	line-height: 2em;
}
:is(h1, h2, h3, h4, p) + p { margin-top: 1em; }

/* ===================================================== typography modifiers */

.tSmall { font-size: 0.9em; }

.tGray { color: var(--light-gray); }

/* ======================================================== unstyle modifiers */

a.mUnstyled {
	color: inherit;
	text-decoration: none;
}

/* ======================================================== generic modifiers */

.mClickable {cursor: pointer; }

/* ======================================================== generic utilities */

.uTruncateLines {
	overflow: hidden;
	display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: var(--lines);
}

.uSingleLineText {
	display: block;
	max-width: 100%;
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
}

.uOverlay {
	position: fixed;
	top: 0; left: 0; right: 0; bottom: 0;
}

/* ========================================================= generic elements */

.Separator {
	height: 3px;
	width: 100%;
	border-radius: 2px;
	position: relative;
	background-color: var(--off-white);
}

.Separator.mSection::after {
	left: 50%;
	content: "• • •";
	position: absolute;
	border-radius: 1em;
	outline: 8px solid white;
	padding: 0.2em 1em 0.4em 1em;
	transform: translate(-50%, -45%);
	background-color: var(--off-white);
}

/* ================================================================== flexbox */

.Flexbox { display: flex; }
.Flexbox.mInline { display: inline-flex; }

.Flexbox.mColumn { flex-direction: column; }

.Flexbox:not(.mColumn).mReverse {	flex-direction: row-reverse; }
.Flexbox.mColumn.mReverse {	flex-direction: column-reverse; }

.Flexbox:not(.mColumn).mRightAlign {justify-content: flex-end; }
.Flexbox.mColumn.mRightAlign {align-items: flex-end; }

.Flexbox:is(:not(.mColumn).mVerticallyCenter, .mColumn.mHorizontallyCenter, .mCenter) { align-items: center; }
.Flexbox:is(:not(.mColumn).mHorizontallyCenter, .mColumn.mVerticallyCenter, .mCenter) {	justify-content: center; }

.Flexbox.mStandardSpacing {
	row-gap: var(--standard-spacing);
	column-gap: var(--standard-spacing);
}
.Flexbox.mCompactSpacing {
	row-gap: calc(var(--standard-spacing) / 1.5);
	column-gap: calc(var(--standard-spacing) / 1.5);
}
.Flexbox.mMinimalSpacing {
	row-gap: calc(var(--standard-spacing) / 3);
	column-gap: calc(var(--standard-spacing) / 3);
}

.Flexbox.mSpaceBetween { justify-content: space-between; }

/* ===================================================================== page */

#Page {
	margin: auto;
	box-sizing: border-box;
	padding: 0 var(--page-padding);
	max-width: var(--page-max-width);
}

/* =================================================================== navbar */

#Navbar {
	top: 0;
	z-index: 2;
	position: sticky;
	background-color: white;
	height: var(--navbar-height) ;
}

#navbarBanner {
	font-size: 2em;
	font-family: var(--display-font);
}

/* ================================================================== toolbar */

#Toolbar {
	overflow: hidden;
	padding: 0.8em 1em;
	border-radius: 5em;
	margin-right: -1em;
	transition: background-color 0.15s ease, max-width 0.15s ease;
}
#Navbar:not(.sMenuOpen) #Toolbar { background-color: var(--off-white); }
@media only screen and (pointer: fine) {#Toolbar { max-width: 1.1em; }}
@media only screen and (pointer: fine) {#Navbar:not(.sMenuOpen) #Toolbar:hover { max-width: calc(var(--content-width) + 1em); }}
@media only screen and (pointer: coarse) {#Navbar:not(.sMenuOpen) #Toolbar { max-width: calc(var(--content-width) + 1em); }}
@media only screen and (pointer: coarse) {#Navbar.sMenuOpen #Toolbar { max-width: 1.1em; }}

#toolbarButtons img { width: 1.2em; }

/* ======================================================= navbar menu button */

#NavbarMenuButton {
	display: flex;
	row-gap: 0.3em;
	align-items: flex-end;
	flex-direction: column;
}

#NavbarMenuButton .bar {
	width: 1.1em;
	height: 0.175em;
	background-color: var(--dark-gray);
	transition: background-color 0.3s ease, width 0.3s ease, transform 0.3s ease;
}
#Navbar.sMenuOpen #NavbarMenuButton .bar:nth-child(2) { width: 0; }
#Navbar.sMenuOpen #NavbarMenuButton .bar:nth-child(1) {	transform: rotate(-45deg) translate(-0.3em, 0.35em); }
#Navbar.sMenuOpen #NavbarMenuButton .bar:nth-child(3) {	transform: rotate(45deg) translate(-0.3em, -0.35em); }

/* =============================================================== navigation */

#NavLinks {
	z-index: -1;
	background-color: white;
	transition: opacity 0.3s ease;
}

#Navbar:not(.sMenuOpen) #NavLinks {
	opacity: 0;
	pointer-events: none;
}

#navLinksList {
	box-sizing: border-box;
	padding: 0 var(--page-padding);
	width: min(100%, var(--page-max-width));
	margin: calc(var(--navbar-height) / 2) auto 0 auto;
}

#NavLinks a {
	font-size: 2.25em;
	transition: color 0.3s ease;
	padding: calc(var(--standard-spacing) / 2) 0;
}
@media only screen and (max-width: 700px) {#NavLinks a { font-size: 2em; }}
@media only screen and (pointer: fine) { #navLinksList:hover a:not(:hover) { color: var(--light-gray); }}

/* ================================================================= messages */

#Messages {
	z-index: -2;
	position: absolute;
	top: calc(100% + 0.5em); right: 0;
}

.Message {
	padding: 0.8em 1em;
	align-self: flex-end;
	box-sizing: border-box;
	color: var(--off-white);
	border-radius: 2em 0.75em 2em 2em;
	background-color: var(--dark-gray);
	box-shadow: 0.75em 0.75em 0 0 #00000011;
	max-width: calc(100vw - var(--page-padding) * 2);
	transition: opacity 0.3s ease, margin-top 0.3s ease, transform 0.3s ease;
	animation: float 2s ease infinite;
}
.Message.sDismissed {
	opacity: 0;
	animation: none;
	pointer-events: none;
	transform: scale(0.75) translateX(20em) !important;
}
.Message.sDismissed + .Message { margin-top: calc(0px - (var(--height) + 1em)); }
.Message.sSuccess {	background-color: var(--green); }
.Message.sError { background-color: var(--red); }

.Message .status {
	font-size: 1.25em;
	font-family: var(--display-font);
}

.Message .closeButton {
	padding: 0.5em;
	line-height: 0;
	border-radius: 5em;
	background-color: #00000011;
}

.Message .closeButton img {
	width: 0.6em;
	filter: invert();
}

@keyframes float {
	0% { transform: translateY(0); }
	50% { transform: translateY(-0.5em); }
	100% { transform: translatey(0); }
}